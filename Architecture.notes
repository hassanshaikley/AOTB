The types of things

Notes:
  Share the config file across front and back end
  Change team 1 to TEAM_L, team 2 to TEAM_R
  MeeleeAttacks should be objects
  In constructors put the least amount of information needed.
  USE let FOR for loops (let i = 0; i++; i< 4)
  Backend unit constructor shouldn't require a team. A team is set when entering a game!

  Platforms:
    Can have an array, and 3 levels of platform?
    OR break the map into squares, the bottom of which can be platforms

    When you land on a platform, notify the server your y and that you have landed on a platform
    How about when you get off a platform? Notify the server you're no longer on a platform? I think this can work.

    The platform code SUCKS ASS

  Two

  One:      -   - - - - -     - - - - -   -
  Ground:   --------------------------------

Back End
  >>GameObject
    - x, y
    - Reference to the game that it's in
      >>CollidingObject (Some Spells and Melee Attacks)
	  >>Spell
	  >>RedhatterMeeleeAttack
      -direction
      -geteffect
    >>MeeleeAttack
      >>Attacks
        >> Team, Damage, (Affect, dependent on a spell )
    >>Units
  >>Components/ ##All the different componenets

  Server
    games {}

    updateGames ()

  Game
    Note:
      Set the game state with a restart function and a setWinner function
    - active_players {}
    - active_spells {}
    - team_one {}
    - team_two {}
    - gameObjects   # Not convinced this is ideal
		    # Might be better to have different arrays for diferent objects

    getId()
    getWinner ()
    setWinner () # Not convinced this is necessary
    getState () # Get the game state by VALUE
    getPlayer() # Return the player by REFERENCE
		# Not convinced this is necessary
    addSpell()
    getSpells()

    addMeeleeAttack()
    addPlayer () # Add a player to this game
    getPlayers() # Return an array of all players
    removePlayer (id) # Remove a player

    update () # Update this specific game
	      # Should update the spells and players in that game
	      # Teehee

  Config # Constants


FrontEnd
  Eliminate MAIN class, change it to ScreenManager also make tests pass.
  Health should not be in the constructors. It should be set by the server.

  Game
    >> it should be that creating a new game creates everything else you need other than players
    Instead of MAIN.stage it should be localGame.stage
    + remote_players {}
    + window_manager WindowManager
    -
    ScreenManager
      + Stage
    Camera Class ! Gotta make one..

  player
  projectile-component
  game-window
    >> This class should contain everything that is displayed from the canvas to the background to the everything
